\documentclass[final]{ltugboat}
\usepackage[T1]{fontenc} % tt \_
\usepackage{lmodern}
\usepackage{microtype}
\usepackage{graphicx}
\usepackage[hidelinks,pdfa]{hyperref}
\usepackage{hologo}
\usepackage{minted}
\setminted{breaklines}
\usemintedstyle{bw}
\newmintedfile[showimplementation]{tex}{
  fontsize=\small,
  linenos,
  xleftmargin=0.5\parindent,
  escapeinside=\%\%,
}
\let\oldshowimplementation\showimplementation
\def\showimplementation#1{%
  \begingroup
  \def\linelabel##1{%
    \phantomsection
    \label{\detokenize{line:##1}}%
  }%
  \let\textit\textsl
  \let\bfseries\relax
  \oldshowimplementation{#1}%
  \endgroup
}
\def\lineref#1{\ref{line:#1}}
\def\linesref#1{\lineref{#1:begin}--\lineref{#1:end}}
\def\verb{\mintinline{text}}
\usepackage{tikz}
\usetikzlibrary{positioning}
\def\url{\tbsurl}
% silence font warnings:
% LaTeX Font Warning: Font shape `OT1/cmr/m/n' in size <45> not available
% (Font)              size <24.88> substituted on input line 94.
\makeatletter\def\@font@warning#1{}\makeatother

%%% Start of metadata %%%
\title{Markdown themes in practice}

% repeat info for each author; comment out items that don't apply.
\author{Vít Starý Novotný}
\address{Studená 453/15 \\ Brno 63800, Czech Republic}
\netaddress{witiko (at) mail dot muni dot cz}
\personalURL{github.com/witiko}

%%% End of metadata %%%

\begin{document}
\maketitle

\begin{abstract}
The Markdown package for \TeX{} supports themes that allow
\TeX nicians to tailor the presentation of Markdown and \acro{YAML} content
on the page. In this article, I will show the current state of Markdown
themes using the example of \LaTeX{} templates that I developed for the
International Software Testing Qualifications Board (\acro{ISTQB}).
Readers will leave with actionable steps to create or modify Markdown
themes for \LaTeX, and insights into extending these principles to other
\TeX{} engines.
\end{abstract}

\section*{Introduction}
Although \TeX{} has beautiful output, its input macro language is an acquired taste for many authors. The Markdown package for \TeX~\cite{novotny2017markdown} allows authors to type familiar Markdown and \acro{YAML} directly into a \TeX{} document and receive a similarly beautiful output.

In my previous article, I introduced Markdown themes~\cite{novotny2021markdown}. Much like \acro{CSS} stylesheets, Markdown themes allow \TeX nicians to tailor the presentation of Markdown and \acro{YAML} content without complicating the document markup for authors. While that article used simple examples to explain the basic concepts behind Markdown themes, it did not demonstrate their application on a larger scale in real-world software projects.

In July 2023, I began working with the International Software Testing Qualifications Board (\acro{ISTQB}) to help them typeset their certification study materials from Markdown and \acro{YAML} sources. In this article, I discuss my work as a case study of using the Markdown package in a real-world software project.

\begin{figure*}
\centering
\includegraphics[width=\linewidth]{images/class-diagram}
\caption{A class diagram of the six Markdown themes that I developed for the International Software Testing Qualifications Board (\acro{ISTQB}). The snippets \texttt{metadata}, \texttt{language}, \texttt{questions}, \texttt{answer-key}, and \texttt{answers} specify the public interface of the themes and arrows specify inheritance.}
\label{fig:class-diagram}
\end{figure*}

\section*{Project overview}
In my work, I developed a \LaTeX{} document class and six Markdown themes~\cite{istqb2024productbase}.

The \LaTeX{} document class is named \texttt{istqb} and it is stored in file \texttt{template/istqb.cls}. It implements the design of all \acro{ISTQB} documents, defines the meaning of common Unicode characters, and defines \LaTeX{} markup such as \cs{istqbsection}, \texttt{\textbackslash istqblandscape\-begin} and \texttt{end}, and \texttt{\textbackslash begin\{istqbobjectives\}}\,\ldots\ \texttt{\textbackslash end\{istqbobjectives\}}.

The Markdown themes are named \texttt{istqb/*} and stored in files \texttt{template/markdowntheme*.sty}, see also Figure~\ref{fig:class-diagram}. Here is a description of the themes:
\begin{itemize}
\item The theme \texttt{istqb/common} enables Markdown syntax extensions, implements the loading of \acro{YAML} language definitions and document metadata into \TeX{} macros, and defines the mapping between Markdown elements and \LaTeX{} markup. The remaining themes are based on this theme and they implement support for specific types of \acro{ISTQB} documents.
\item The \texttt{istqb/body-of-knowledge} and  \texttt{syllabus} themes are used in \acro{ISTQB} Body of Knowledge and Syllabus documents. At the time of writing, the themes implement no extra functionality.
\item The theme \texttt{istqb/sample-exam} implements the loading of \acro{YAML} question definitions into \TeX{} macros in \acro{ISTQB} Sample Exam Questions and Answers documents. The following two themes are based on this theme.
\item The theme \texttt{istqb/sample-exam/questions} implements the typesetting of questions in \acro{ISTQB} Sample Exam Questions documents.
\item The theme \texttt{istqb/sample-exam/answers} implements typesetting of answer keys and answers in \acro{ISTQB} Sample Exam Answers documents.
\end{itemize}
\vfill

\noindent
\begin{tikzpicture}[every node/.style={inner sep=0pt, outer sep=0pt}]
  \node (wolf) at (0, 0) {\includegraphics[width=\linewidth]{images/detective-wolf.jpg}};
  \node [above=-4.5mm of wolf, text width=\linewidth, align=justify] {In the rest of this article, I discuss different parts of the implementation. In each section, I first present an example document and I show the typeset output. Then, I explain the implementation.};
  \node [below=3mm of wolf, text width=\linewidth, align=center] {With Markdown themes, your document can look like anything, even like a wolf in a disguise.};
\end{tikzpicture}%
\vspace{-0.65mm}

\section{Processing \acro{YAML}}
\label{sec:yaml}
The themes define snippets \texttt{metadata}, \texttt{language}, and \texttt{questions} for processing \acro{YAML} files with document metadata, language definitions, and question definitions, respectively. In the following three subsections, I discuss each snippet in detail.

\subsection{Document metadata}
Here is an example \acro{ISTQB} Syllabus document that loads document metadata from a \acro{YAML} file named \texttt{metadata.yml} and typesets a landing page:

\inputminted{latex}{examples/landing-page.tex}

\phantomsection
\label{listing:landing-page.tex}%

\noindent
Here is an example of the \acro{YAML} file \texttt{metadata.yml}:

\inputminted{yaml}{examples/metadata.yml}

Typesetting the example \acro{ISTQB} Syllabus document produces the following output:

\input images/landing-page

The snippet \texttt{metadata} is defined in the theme \texttt{istqb/common} as follows:

\showimplementation{examples/landing-page.sty}

On lines \linesref{keys:istqb/metadata}, we define an expl3 key--value \texttt{istqb/metadata} that stores the values of unstructured metadata fields in global expl3 variables.

On lines \linesref{snippet:metadata}, we define the snippet \texttt{metadata}, which processes \acro{YAML} content as follows:
\begin{enumerate}
\item Pass unstructured metadata fields to the key--value \texttt{istqb/metadata}.
\item Pass the metadata field \texttt{provided-by} to a snippet \texttt{metadata/provided-by}.
\end{enumerate}
On lines \linesref{cmd-call:istqb_load_language} and \linesref{cmd-def:istqb_load_language}, after we have processed document metadata, we pass the value of the metadata field \texttt{language} to a snippet of the same name. This snippet processes language definitions, which we will discuss in more detail in the following section.

Notice the modular design of the processing logic, which separates snippets that define the processing of \acro{YAML} elements from expl3 key--values that store metadata. Besides improving code clarity, this separation makes it straightforward to integrate a \TeX{} key--value interface for specifying metadata. This can be particularly useful in hybrid templates, which aim to support both \TeX{} and \acro{YAML} input.

On lines \linesref{snippet:metadata/provided-by}, we define the snippet \texttt{metadata\discretionary{/}{}{/}provided-by}, which processes the metadata field \texttt{provided-by} as follows:
\begin{enumerate}
\item Store short-hand third-party definitions, such as ``\mintinline{yaml}"- Hungarian testing board"'' from the example \acro{YAML} file, in an expl3 sequence variable \verb"\g_istqb_third_parties_seq".
\item Pass verbose third-party definitions, such as the following one from the example \acro{YAML} file, to a snippet \texttt{metadata/provided-by/verbose}:
\begin{minted}{yaml}
- name: Czech and Slovak Quality Board
  logo: casqb-logo-vertical
\end{minted}
\end{enumerate}

Notice the design pattern on lines \linesref{pattern:first} and \linesref{pattern:second} that locally applies a \meta{snippet} to an \meta{element}.\footnote{Such design patterns can be repetitive and difficult to understand without additional comments in the code. Markdown Enhancement Proposal (\acro{MEP}) 445~\cite{starynovotny2024parametric} envisions support for higher-order snippets that would make it possible to hide such design patterns behind easy-to-read shorthands.} This pattern redefines the renderer \meta{element}\verb"Begin", which is placed to the output when the \meta{element} starts, as follows:
\begin{enumerate}
\item Open a \TeX{} group and apply the \meta{snippet}.
\item Redefine the renderer \meta{element}\verb"End", which is placed to the output when the \meta{element} ends, so that it closes the \TeX{} group.
\end{enumerate}

On lines \linesref{keys:istqb/metadata/provided-by}, we define an expl3 key--value \textls[-12]{\texttt{istqb/metadata/provided-by}} that stores the names and logos from verbose third-party definitions in local expl3 variables.

On lines \linesref{snippet:metadata/provided-by/verbose}, we define snippet \texttt{metadata\discretionary{/}{}{/}provided-by/verbose}, which passes names and logos from verbose third-party definitions to the key--value \texttt{istqb/metadata/provided-by}. After processing a single definition, the name is stored in the variable \verb"\g_istqb_third_parties_seq". If the filename of a logo is also specified, it is stored in an expl3 dict variable \verb"\g_istqb_third_party_logos_prop".

\subsection{Language definitions}
Here is the \acro{YAML} file \texttt{en.yml}, which contains the language definitions for English \acro{ISTQB} documents:

\inputminted{yaml}{examples/en.yml}

The snippet \texttt{language} is defined in the theme \texttt{istqb/common} as follows:

\showimplementation{examples/language-definitions.sty}

On lines \linesref{keys:istqb/language}, we define an expl3 key--value \texttt{istqb/language} that processes the fields from the language definitions as follows:
\begin{enumerate}
\item Load and set up internationalization using the babel package on lines \lineref{usepackage:babel} and \linesref{cmd-call:selectlanguage}.
\item Store the values of the fields in global expl3 variables and other non-expl3 control sequences.
\end{enumerate}
To elaborate on the second point, here are some examples of how we store the values of the fields from the language definitions:
\begin{itemize}
\item On lines \linesref{keys:istqb/language/provided-by}, we store the values under the field \texttt{provided-by} with the singular and plural forms of ``Provided by''. These forms appear at the bottom of the landing page shown on page \pageref{fig:landing-page}, see also the implementation in Section~\ref{sec:landing-page}.
\item On lines \linesref{keys:istqb/language/list-delimiters}, we store the values under the field \texttt{list-delimiters} with delimiters such as ``and'', ``,'', and ``, and'', which also appear at the bottom of the landing page. Notice the use of the function \verb"\__istqb_gset_with_spaces:Nn", which adds spaces around the delimiters unless they start with a comma. In that case, only one space after the delimiter is added.
\item On lines \linesref{keys:istqb/language/reference-labels}, we store the values under the field \texttt{reference-labels} with labels for different object types such as ``Section'', ``Figure'', and ``Table'' used in cross-references. See also the implementation of cross-references in Section~\ref{sec:cross-references}.
\end{itemize}

On lines \linesref{snippet:language}, we define the snippet \texttt{language}, which passes all fields from the language definitions to the key--value \texttt{istqb/language}. This is a simpler design compared to document metadata, which is made possible by the lack of variable-length \acro{YAML} sequences in language definitions.

\subsection{Question definitions}
Here is an example \acro{ISTQB} Sample Exam Questions document that loads question definitions from a \acro{YAML} file named \texttt{questions.yml} and typesets a list of questions:

\inputminted{latex}{examples/questions.tex}

\noindent
Here is an example of the \acro{YAML} file \texttt{questions.yml}:

\inputminted{yaml}{examples/questions.yml}

Typesetting the example \acro{ISTQB} Sample Exam Questions document produces the following output:

\input images/questions

% TODO: Discuss the implementation.

\section{Typesetting \acro{YAML} and Markdown}
\subsection{Landing page}
\label{sec:landing-page}

\iffalse
The command \verb"\istqblandingpage" in the example \acro{ISTQB} Syllabus document on page~\pageref{listing:landing-page.tex} typesets the landing page. Since the majority of the implementation involves text formatting and is not particularly noteworthy, we will concentrate on the bottom part of the landing page that lists the names and logos of third-party organizations:

\showimplementation{examples/landing-page.cls}

% TODO: Discuss the implementation.
\fi

\subsection{Learning objectives}
% [@istqb2024example, Section 1.2]
\subsection{Superscripts and subscripts}
% [@istqb2024example, Section 1.5]
\subsection{Sections}
% [@istqb2024example, Section 1.7]
\subsection{Figures}
% [@istqb2024example, Section 1.9]
\subsection{Simple tables}
% [@istqb2024example, Section 1.10]
\subsection{Complex tables}
% [@istqb2024example, Section 1.11]
% [@istqb2024productbase, Issue #51]
\subsection{Cross-references}
\label{sec:cross-references}
% [@istqb2024example, sections 1.8--1.10]
\subsection{Citations}
% [@istqb2024example, Section 1.12]
\subsection{Indexing}
% [@istqb2024example, Section 1.13]
\subsection{Questions}
% [@istqb2024producttemplate, File sample-exam-questions.tex]
\subsection{Answer key}
% [@istqb2024producttemplate, File sample-exam-answers.tex]
\subsection{Answers}
% [@istqb2024producttemplate, File sample-exam-answers.tex]
\section*{Conclusion}

\SetBibJustification{\raggedright \advance\itemsep by 2pt plus1pt minus1pt }
\bibliographystyle{tugboat}
\begingroup
\gappto{\UrlBreaks}{\UrlOrds}
\bibliography{tb140starynovotny-markdown}
\endgroup

\makesignature
\end{document}