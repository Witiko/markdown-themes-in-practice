\documentclass[final]{ltugboat}
\usepackage[T1]{fontenc} % tt \_
\usepackage{lmodern}
\usepackage{microtype}
\usepackage{graphicx}
\usepackage[hidelinks,pdfa]{hyperref}
\usepackage{hologo}
\usepackage{minted}
\setminted{breaklines}
\usemintedstyle{bw}
\newmintedfile[showimplementation]{tex}{
  fontsize=\small,
  linenos,
  firstnumber=last,
  xleftmargin=0.5\parindent,
  escapeinside=\%\%,
}
\let\oldshowimplementation\showimplementation
\def\showimplementation#1#2{%
  \begingroup
  \def\linelabel##1{%
    \phantomsection
    \label{\detokenize{line:##1}}%
  }%
  \let\textit\textsl
  \let\bfseries\relax
  \oldshowimplementation[#1]{#2}%
  \endgroup
}
\def\slash{\discretionary{/}{/}{/}}
\def\hyphen{\discretionary{-}{-}{-}}
\def\lineref#1{\ref{line:#1}}
\def\linesref#1{\lineref{#1:begin}--\lineref{#1:end}}
\def\verb{\mintinline{text}}
\usepackage{tikz}
\usetikzlibrary{positioning}
\def\url{\tbsurl}
% silence font warnings:
% LaTeX Font Warning: Font shape `OT1/cmr/m/n' in size <45> not available
% (Font)              size <24.88> substituted on input line 94.
\makeatletter\def\@font@warning#1{}\makeatother

%%% Start of metadata %%%
\title{Markdown themes in practice}

% repeat info for each author; comment out items that don't apply.
\author{V\'{i}t Star\'{y} Novotn\'{y}}
\address{Studen\'{a} 453/15 \\ Brno 63800, Czech Republic}
\netaddress{witiko (at) mail dot muni dot cz}
\personalURL{github.com/witiko}

%%% End of metadata %%%

\begin{document}
\maketitle

\begin{abstract}
The Markdown package for \TeX{} supports themes that allow
\TeX nicians to tailor the presentation of Markdown and \acro{YAML} content
on the page. In this article, I will show the current state of Markdown
themes using the example of \LaTeX{} templates that I developed for the
International Software Testing Qualifications Board (\acro{ISTQB}).
Readers will leave with actionable steps to create or modify Markdown
themes for \LaTeX, and insights into extending these principles to other
\TeX{} engines.
\end{abstract}

\section*{Introduction}
Although \TeX{} has beautiful output, its input macro language is an acquired taste for many authors. The Markdown package for \TeX{} allows authors to type familiar Markdown and \acro{YAML} directly into a \TeX{} document and receive a similarly beautiful output.

In my previous article, I introduced Markdown themes~\cite{novotny2021markdown}. Much like \acro{CSS} stylesheets, Markdown themes allow \TeX nicians to tailor the presentation of Markdown and \acro{YAML} content without complicating the document markup for authors. While that article used simple examples to explain the basic concepts behind Markdown themes, it did not demonstrate their application on a larger scale in real-world software projects.

In July 2023, I began working with the International Software Testing Qualifications Board (\acro{ISTQB}) to help them typeset their certification study materials from Markdown and \acro{YAML} sources. In this article, I discuss my work as a case study of using the Markdown package in a real-world software project.

\begin{figure*}
\centering
\includegraphics[width=\linewidth]{images/class-diagram}
\caption{A class diagram of the six Markdown themes that I developed for the International Software Testing Qualifications Board (\acro{ISTQB}). The snippets \texttt{metadata}, \texttt{language}, \texttt{questions}, \texttt{answer-key}, and \texttt{answers} specify the public interface of the themes and arrows specify inheritance.}
\label{fig:class-diagram}
\vspace{1.5cm}
\input images/question-definitions
\caption{Three different ways to typeset question definitions in \acro{ISTQB} Sample Exam Questions and Answers documents: a) a list of questions, b) an answer key, and c) a list of answers.}
\label{fig:question-definitions}
\end{figure*}

\section*{Project overview}
In my work, I developed a \LaTeX{} document class and six Markdown themes~\cite{istqb2024productbase}.

The \LaTeX{} document class is named \texttt{istqb} and it is stored in file \texttt{template\slash istqb.cls}. It implements the design of all \acro{ISTQB} documents, defines the meaning of common Unicode characters, and defines \LaTeX{} markup such as \cs{istqbunnumbered\-section}, \texttt{\textbackslash istqb\-land\-scape\-begin}, and \texttt{\textbackslash istqb\-land\-scape\-end}.

The Markdown themes are named \texttt{istqb\slash*} and stored in files \texttt{template\slash markdowntheme*.tex} and \texttt{*.sty}, see also Figure~\ref{fig:class-diagram}. Here is what they do:
\begin{itemize}
\item The theme \texttt{istqb\slash common} enables Markdown syntax extensions, implements the loading of \acro{YAML} language definitions and document metadata into \TeX{} macros, and defines the mapping between Markdown elements and \LaTeX{} markup. The remaining themes are based on this theme and they implement support for specific types of \acro{ISTQB} documents.
\item The \texttt{istqb\slash body-of-knowledge} and  \texttt{syllabus} themes are used in \acro{ISTQB} Body of Knowledge and Syllabus documents. At the time of writing, the themes implement no extra functionality.
\item The theme \texttt{istqb\slash sample-exam} implements the loading of \acro{YAML} question definitions into \TeX{} macros in \acro{ISTQB} Sample Exam Questions and Answers documents. The following two themes are based on this theme.
\item The theme \texttt{istqb\slash sample-exam\slash questions} implements the typesetting of questions in \acro{ISTQB} Sample Exam Questions documents.
\item The theme \texttt{istqb\slash sample-exam\slash answers} implements typesetting of answer keys and answers in \acro{ISTQB} Sample Exam Answers documents.
\end{itemize}
\vfill

\noindent
\begin{tikzpicture}[every node/.style={inner sep=0pt, outer sep=0pt}]
  \node (wolf) at (0, 0) {\includegraphics[width=\linewidth]{images/detective-wolf.jpg}};
  \node [above=-4.5mm of wolf, text width=\linewidth, align=justify] {In the rest of this article, I show the main concepts behind Markdown themes on the example of \acro{ISTQB} Sample Exam Questions and Answers documents that use the themes \texttt{istqb\slash sample-exam\slash questions} and \texttt{\slash answers}.};
  \node [below=3mm of wolf, text width=\linewidth, align=center] {With Markdown themes, your document can wear many different disguises, just like the wolf.};
\end{tikzpicture}%
\vspace{-0.65mm}

\section{Question definitions}
As an example of question definitions, I use the following \acro{YAML} file named \texttt{questions.yml}:

\inputminted{yaml}{examples/questions.yml}

\noindent
The file specifies three questions. For each question, it provides up to five possible answers.

\section{User interface}
In this section, I show how we can use themes \texttt{istqb\slash sample-exam\slash questions}, and \texttt{\slash answers} to typeset the question definitions from the previous section.

\subsection{Typesetting questions}
As an example of an \acro{ISTQB} Sample Exam Questions document, I use the following \LaTeX{} file:

\inputminted{latex}{examples/questions.tex}

\noindent
The file imports the snippet \texttt{questions} from theme \texttt{istqb\slash sample-exam\slash questions} and uses it to:
\begin{enumerate}
\item Process question definitions in \texttt{questions.yml}.
\item Typeset the list of questions shown in Figure~\ref{fig:question-definitions}a.
\end{enumerate}

\subsection{Typesetting answer key and answers}
As an example of an \acro{ISTQB} Sample Exam Answers document, I use the following \LaTeX{} file:

\inputminted{latex}{examples/answer-key-and-answers-short.tex}

\noindent
The file imports snippets \texttt{answers} and \texttt{answer-key} from theme \texttt{istqb\slash sample-exam\slash answers} and uses them to:
\begin{enumerate}
\item Process question definitions in \texttt{questions.yml}.
\item Typeset the answer key shown in Figure~\ref{fig:question-definitions}b.
\item Typeset the list of answers shown in Figure~\ref{fig:question-definitions}c.
\end{enumerate}

\section{Implementation}
In this section, I show the implementation of \acro{ISTQB} Sample Exam Questions and Answers documents. To make programming easier, I use the high-level expl3 language in addition to plain \TeX{} and \LaTeXe.

\subsection{Processing question definitions}
Both the snippet \texttt{questions} from the theme \texttt{istqb\slash sample-exam\slash questions} and the snippet \texttt{answers} from the theme \texttt{\slash answers} process question definitions before typesetting them. For the processing, they use the snippet \texttt{questions} from the theme \texttt{istqb\slash sample-exam}, which I describe in this section.
\looseness=-1

First, I define a key--value \texttt{istqb\slash questions}:

\showimplementation
  {firstnumber=1, firstline=1, lastline=8}
  {examples/questions.sty}

\noindent
The key--value stores the values in top-level unstructured fields \texttt{num-questions}, \texttt{max\hyphen score}, and \texttt{pass\hyphen score} from question definitions to variables.

Next, I define a key--value \texttt{istqb\slash questions\slash duration}:

\showimplementation
  {firstline=9, lastline=14}
  {examples/questions.sty}

\noindent
The key--value stores the values in the top-level structured field \texttt{duration} to variables.

Then, I define the snippet \texttt{questions} itself:

\showimplementation
  {firstline=15, lastline=60}
  {examples/questions.sty}

\noindent
The snippet processes question definitions as follows:
\begin{enumerate}
\item Define an empty sequence that will store question numbers.
\item Pass unstructured top-level fields to the key--value \texttt{istqb\slash questions}.
\item Pass the structured top-level field \texttt{duration} to the key--value \texttt{istqb\slash questions\slash duration}.
\item Pass the structured top-level field \texttt{questions} to a snippet \texttt{questions/list}.
\end{enumerate}

Next, I define the snippet \texttt{questions/list}:

\showimplementation
  {firstline=61, lastline=79}
  {examples/questions.sty}

\noindent
The snippet processes each question as follows:
\begin{enumerate}
\item Store the current question number.
\item Pass all fields to a snippet \texttt{questions/*}.
\end{enumerate}

Then, I define key--value \texttt{istqb\slash questions\slash *}:

\showimplementation
  {firstline=80, lastline=118}
  {examples/questions.sty}

\noindent
The key--value stores the values in unstructured fields \texttt{number\hyphen of\hyphen points}, \texttt{learing\hyphen objective}, \texttt{k\hyphen level}, \texttt{explanation}, and \texttt{question} to dicts. The dicts use the current question number as the key.

Next, I define the snippet \texttt{questions/*}:

\showimplementation
  {firstline=119, lastline=154}
  {examples/questions.sty}

\noindent
The snippet processes question definitions as follows:
\begin{enumerate}
\item Pass unstructured fields to the key--value \texttt{istqb\slash questions\slash *}.
\item Pass the structured field \texttt{correct} to a snippet \texttt{questions\slash *\slash correct}.
\item Pass the structured field \texttt{answers} to a snippet \texttt{questions\slash *\slash answers}.
\end{enumerate}

Notice the design pattern on lines \linesref{pattern:01}, \linesref{pattern:02}, and \linesref{pattern:03} that locally applies a \meta{snippet} to an \meta{element}.\footnote{Such design patterns can be repetitive and difficult to understand without additional comments in the code. Markdown Enhancement Proposal (\acro{MEP}) 445~\cite{starynovotny2024parametric} envisions support for higher-order snippets that would make it possible to hide such design patterns behind easy-to-read shorthands.} This pattern redefines the renderer \meta{element}\verb"Begin", which is placed to the output when the \meta{element} starts, as follows:
\begin{enumerate}
\item Open a \TeX{} group and apply the \meta{snippet}.
\item Redefine the renderer \meta{element}\verb"End", which is placed to the output when the \meta{element} ends, so that it closes the \TeX{} group.
\end{enumerate}

Finally, I define snippets \texttt{questions\slash *\slash answers} and \texttt{\slash correct}:

\showimplementation
  {firstline=155}
  {examples/questions.sty}

\noindent
The snippets accumulate potential and correct answer letters in a sequence, respectively. Then, they store the sequence as a comma-list to a dict that uses the current question number as the key.

Moveover, the snippet \texttt{questions\slash *\slash answers} stores potential answer texts to a dict that uses \meta{current question number}\texttt{\slash}\meta{answer letter} as key.

Notice that I used no format-specific code in this section. Therefore, I can use the theme \texttt{istqb\slash sample-exam} with any format that supports expl3 such as plain \TeX{} and \Hologo{ConTeXt}, not just with \LaTeX.

\subsection{Typesetting questions}
In this section, I describe the snippet \texttt{questions} from theme \texttt{istqb\slash sample-exam\slash questions}. This snippet typesets the list of questions in Figure~\ref{fig:question-definitions}a.

First, I import the theme \texttt{istqb\slash sample-exam} and I use the snippet \texttt{questions} from this theme to process question definitions:

\showimplementation
  {firstnumber=1, lastline=6}
  {examples/questions/questions.sty}

After the question definitions have been processed, I iterate over all question numbers. For each question number, I define a variable with code that typesets the corresponding question:

\showimplementation
  {firstline=7, lastline=13}
  {examples/questions/questions.sty}

\noindent
First, I add a section heading for the question:

\showimplementation
  {firstline=14, lastline=47}
  {examples/questions/questions.sty}

\noindent
Next, I add the question text and potential answers:

\showimplementation
  {firstline=48, lastline=63}
  {examples/questions/questions.sty}

\noindent
Lastly, I add the text ``Select \meta{number of correct answers} option(s).'':

\showimplementation
  {firstline=64, lastline=77}
  {examples/questions/questions.sty}

Finally, I typeset the code from the variable at natural height and store the result to a vertical box:

\showimplementation
  {firstline=78, lastline=80}
  {examples/questions/questions.sty}

\noindent
For short questions, I insert the box to the current list for typesetting to prevent page breaks within the question. For longer questions, I place the content of the variable to the input stream, so that page breaks can occur naturally:

\showimplementation
  {firstline=81}
  {examples/questions/questions.sty}

\subsection{Typesetting answer key}
In this section, I describe the snippet \texttt{answer\hyphen key} from the theme \texttt{istqb\slash sample\hyphen exam\slash answers}. This snippet typesets the answer key in Figure~\ref{fig:question-definitions}b.

First, I load packages multicol and supertabular:

\showimplementation
  {firstnumber=1, lastline=7}
  {examples/answers/answer-key.sty}

\noindent
The packages allow me to typeset the answer key as a table in a two-column layout that automatically inserts column breaks.

Next, I import the theme \texttt{istqb\slash sample-exam} and I use the snippet \texttt{questions} from this theme to process question definitions:

\showimplementation
  {firstline=8, lastline=13}
  {examples/answers/answer-key.sty}

After the question definitions have been processed, I start a two-column layout:

\showimplementation
  {firstline=14, lastline=16}
  {examples/answers/answer-key.sty}

\noindent
Then, I set the heading and the tail of the table:

\showimplementation
  {firstline=17, lastline=30}
  {examples/answers/answer-key.sty}

\noindent
Next, I define a variable that typesets the table:

\showimplementation
  {firstline=31, lastline=33}
  {examples/answers/answer-key.sty}

\noindent
First, I start the table:

\showimplementation
  {firstline=34, lastline=38}
  {examples/answers/answer-key.sty}

\noindent
Next, I iterate over all question numbers:

\showimplementation
  {firstline=39, lastline=44}
  {examples/answers/answer-key.sty}

\noindent
For each question, I add the question number:

\showimplementation
  {firstline=45, lastline=47}
  {examples/answers/answer-key.sty}

\noindent
Next, I add the correct answer letters:

\showimplementation
  {firstline=48, lastline=57}
  {examples/answers/answer-key.sty}

\noindent
Then, I add the learning objective:

\showimplementation
  {firstline=58, lastline=74}
  {examples/answers/answer-key.sty}

\noindent
Next, I add the K-level:

\showimplementation
  {firstline=75, lastline=84}
  {examples/answers/answer-key.sty}

\noindent
Lastly, I add the number of points:

\showimplementation
  {firstline=85, lastline=96}
  {examples/answers/answer-key.sty}

\noindent
After I have iterated over all question numbers, I end the table, I place the content of the variable to the input stream, and I end the multicolumn layout:

\showimplementation
  {firstline=97}
  {examples/answers/answer-key.sty}

\subsection{Typesetting answers}
In this section, I describe the snippet \texttt{answers} from the theme \texttt{istqb\slash sample\hyphen exam\slash answers}. This snippet typesets the list of answers in Figure~\ref{fig:question-definitions}c.

First, I load package longtable:

\showimplementation
  {firstnumber=1, lastline=4}
  {examples/answers/answers.sty}

\noindent
The package allows me to typeset the list of answers as a table that automatically inserts page breaks.

Next, I use snippet the \texttt{questions} from theme \texttt{istqb\slash sample\hyphen exam} to process question definitions:

\showimplementation
  {firstline=5, lastline=8}
  {examples/answers/answers.sty}

After the question definitions have been processed, I define a variable that typesets the table:

\showimplementation
  {firstline=9, lastline=14}
  {examples/answers/answers.sty}

\noindent
First, I start the table and I set its heading:

\showimplementation
  {firstline=15, lastline=39}
  {examples/answers/answers.sty}

\noindent
Next, I iterate over all question numbers:

\showimplementation
  {firstline=40, lastline=42}
  {examples/answers/answers.sty}

\noindent
For each question, I add the question number:

\showimplementation
  {firstline=43, lastline=50}
  {examples/answers/answers.sty}

\noindent
Next, I add the correct answer letters:

\showimplementation
  {firstline=51, lastline=60}
  {examples/answers/answers.sty}

\noindent
Then I add the explanation text:

\showimplementation
  {firstline=61, lastline=81}
  {examples/answers/answers.sty}

\noindent
Next, I add the learning objective:

\showimplementation
  {firstline=82, lastline=98}
  {examples/answers/answers.sty}

\noindent
Then, I add the K-level:

\showimplementation
  {firstline=99, lastline=108}
  {examples/answers/answers.sty}

\noindent
Lastly, I add the number of points:

\showimplementation
  {firstline=109, lastline=119}
  {examples/answers/answers.sty}

\noindent
After I have iterated over all question numbers, I end the table and I place the content of the variable to the input stream:

\showimplementation
  {firstline=120}
  {examples/answers/answers.sty}

\section*{Conclusion}

In this article, I have demonstrated the practical application of Markdown themes through a project that enabled the International Software Testing Qualifications Board (\acro{ISTQB}) to produce their certification study materials from Markdown and \acro{YAML} sources. While my previous article~\cite{novotny2021markdown} focused on the underlying concepts of Markdown themes, this article provides concrete code used in a real-world software project. I hope this practical demonstration raises awareness of Markdown themes and illustrates how users can incorporate them into their own projects.

For \acro{ISTQB}, the project for has yielded numerous benefits: Writing text in a structured format using Markdown and \acro{YAML}, while generating visually appealing outputs with \LaTeX{}, facilitates the separation of content from formatting. This ensures consistent application of the document's visual style across all \acro{ISTQB} content. Additionally, the structured text enables content verification against \acro{YAML} schemas and \acro{ISTQB} writing rules and allows for the creation of a complex knowledge base through automated processing. This enhances the quality of learning materials and reduces administrative overhead.

Moreover, the plain text formats of Markdown and \acro{YAML} offer significant advantages over binary formats like Microsoft Office. They allow for efficient version control, better tracking of changes, collaborative editing, and fewer defects in the final products. The capability to produce various output formats, such as \acro{EPUB}, \acro{HTML}, and \acro{PDF} with functional hyperlinks and cross-references, further amplifies the utility of this approach.

\section*{Related work}
Although this article is titled ``\!\emph{Markdown} themes in practice'', my main example focused on processing and typesetting \acro{YAML} files rather than Markdown. In my approach, I developed an event-based \LaTeX{} parser that constructs and typesets expl3 data structures that represent \acro{YAML} files. My approach works in any \TeX{} engine with shell access, such as pdf\TeX{} and \XeTeX, not just Lua\TeX.

In the previous issue of \TUB~\cite{nijenhuis2024specifying}, Erik Nijenhuis showed a different approach towards typesetting \acro{YAML} files in \LaTeX. In their approach, Erik used their lua-placeholders library~\cite{nijenhuis2024lua} to load \acro{YAML} files into Lua tables and then query them from \TeX{} code. Erik's approach requires Lua\TeX{} but can be more convenient for non-programmers.

Both Erik's and my approaches use the tinyyaml Lua library~\cite{lee2023lua}. Lua\TeX{} users who are interested in processing \acro{YAML} files directly from Lua code may find it convenient to use tinyyaml directly.

\section*{Acknowledgements}
I wish to extend my special thanks to Tereza Vrabcová, Marei Peischl, Daniel Po\v{l}an, and Petr Sojka for their invaluable insights and thorough review of my work. Their expertise and thoughtful feedback have been instrumental in shaping the final manuscript.

I would also like to thank Greg at \url{https://fiverr.com/quickcartoon} for their illustrations of the wolf mascot, which have provided an engaging visual identity of the Markdown package over the past four years.

\SetBibJustification{\raggedright \advance\itemsep by 2pt plus1pt minus1pt}
\bibliographystyle{tugboat}
\begingroup
\gappto{\UrlBreaks}{\UrlOrds}
\bibliography{tb140starynovotny-markdown-themes}
\endgroup

\makesignature
\end{document}
