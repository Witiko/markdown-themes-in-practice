\usepackage [ shorthands = off ] { babel }
\keys_define:nn
  { istqb / language }
  {
    babel-language .code:n = {
      \selectlanguage { #1 }
    },
    appendix .tl_gset:N = \istqbappendixname,
    references .tl_gset:N = \istqbrefname,
    further-reading .tl_gset:N =
      \istqbfurtherreadingname,
    istqb .tl_gset:N = \istqborgname,
    contents .tl_gset:N = \contentsname,
  }
\keys_define:nn
  { istqb / language
      / bibliography-subsections }
  {
    standards .tl_gset:N =
      \istqbstandardsname,
    documents .tl_gset:N =
      \istqbdocumentsname,
    books .tl_gset:N = \istqbbooksname,
    articles .tl_gset:N = \istqbarticlesname,
  }
\keys_define:nn
  { istqb / language / page }
  {
    1 .tl_gset:N =
      \istqbpagename,
    2 .tl_gset:N =
      \istqboutofname,
  }
\keys_define:nn
  { istqb / language / provided-by }
  {
    1 .tl_gset:N =
      \istqbprovidedbysingularname,
    2 .tl_gset:N =
      \istqbprovidedbypluralname,
  }
\cs_new:Nn
  \__istqb_gset_with_spaces:Nn
  {
    \tl_gset:Nn
      #1
      { #2 }
    \regex_match:nnF
      { ^, }
      { #2 }
      {
        \tl_gput_left:Nn
          #1
          { ~ }
      }
    \tl_gput_right:Nn
      #1
      { ~ }
  }
\keys_define:nn
  { istqb / language / list-delimiters }
  {
    1 .code:n = {
      \__istqb_gset_with_spaces:Nn
        \g_istqb_list_delimiter_two
        { #1 }
    },
    2 .code:n = {
      \__istqb_gset_with_spaces:Nn
        \g_istqb_list_delimiter_many
        { #1 }
    },
    3 .code:n = {
      \__istqb_gset_with_spaces:Nn
        \g_istqb_list_delimiter_last
        { #1 }
    },
  }
\prop_new:N \g_istqb_reference_labels_prop
\keys_define:nn
  { istqb / language / reference-labels }
  {
    unknown .code:n = {
      \prop_gput:NVn
        \g_istqb_reference_labels_prop
        \l_keys_key_str
        { #1 }
    },
  }

\tl_new:N \l_istqb_language_position
\markdownSetupSnippet
  { language }
  {
    jekyllData,
    expectJekyllData,
    renderers = {
      jekyllData(Sequence|Mapping)Begin = {
        \group_begin:
        \str_if_eq:nnF
          { #1 }
          { null }
          {
            \tl_set:Nn
              \l_istqb_language_position
              { #1 / }
          }
      },
      jekyllData(Sequence|Mapping)End = {
        \group_end:
      },
      jekyllDataString = {
        \tl_set:Nx
          \l_tmpa_tl
          { { \l_istqb_language_position
              #1 } }
        \tl_put_right:Nn
          \l_tmpa_tl
          { = { #2 } }
        \keys_set:nV
          { istqb / language }
          \l_tmpa_tl
      },
      jekyllDataEnd = ,
    },
  }